{"version":3,"sources":["ProtoTest.js"],"names":["Protobufjs","require","protoDefine","builder","loadProto","ccc","build","module","exports","encodeObject","msgName","obj","msgObj","buffer","encode","toBuffer","e","console","log","ArrayBuffer","decodeBuffer","message","decode"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAIA,aAAaC,QAAQ,UAAR,CAAjB;;AAEA,IAAIC,mkJAAJ;;AAmFA;AACA;AACA;;AAEA,IAAIC,UAAUH,WAAWI,SAAX,CAAqBF,WAArB,CAAd;AACA,IAAIG,MAAMF,QAAQG,KAAR,CAAc,KAAd,CAAV;AACA;AACA;;;;;AAKAC,OAAOC,OAAP,CAAeC,YAAf,GAA8B,UAAWC,OAAX,EAAoBC,GAApB,EAC9B;AACI,QAAI;AACA,YAAIC,SAAS,IAAIP,IAAIK,OAAJ,CAAJ,CAAiBC,GAAjB,CAAb;AACA,YAAIE,SAASD,OAAOE,MAAP,GAAgBC,QAAhB,EAAb;AACA,eAAOF,MAAP;AACH,KAJD,CAIE,OAAOG,CAAP,EAAU;AACRC,gBAAQC,GAAR,CAAYF,CAAZ;AACA,eAAO,IAAIG,WAAJ,EAAP;AACH;AACJ,CAVD;AAWA;;;;;AAKAZ,OAAOC,OAAP,CAAeY,YAAf,GAA8B,UAAWV,OAAX,EAAoBG,MAApB,EAC9B;AACI,QAAI;AACA,YAAIQ,UAAUhB,IAAIK,OAAJ,EAAaY,MAAb,CAAoBT,MAApB,CAAd;AACA,eAAOQ,OAAP;AACH,KAHD,CAGE,OAAOL,CAAP,EAAU;AACRC,gBAAQC,GAAR,CAAYF,CAAZ;AACA,eAAO,EAAP;AACH;AACJ,CATD","file":"ProtoTest.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\resources\\Script\\proto","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\r\n\r\n// 这个文件是一个Protobuf的管理模块，把具体的encode和decode操作封装了一层，我觉得这样写清晰、容易管理，而且node服务器也可以公用。\r\nvar Protobufjs = require('protobuf');\r\n\r\nvar protoDefine = `\r\n\r\npackage ccc; \r\nmessage Login_C2S{\r\n    required int32 player_id = 1;\r\n    required string token     = 2;\r\n}\r\n// RQ 微信登录 hall_login_wechat/login\r\nmessage WebHallWechatLoginRQ {\r\n    required string code            = 1;    // 微信登录code\r\n    optional string appid           = 2;    // appid\r\n    optional uint32 client_type     = 3;    // 客户端类型\r\n    optional string spread_url      = 4;    // 渠道标识\r\n    optional string device_id       = 5;    // 设备ID\r\n    optional string platform        = 6;    // 请求来自的平台(如:pk)\r\n}\r\n\r\n// RQ 手机登录 hall_login_mobile/login\r\nmessage WebHallMobileLoginRQ {\r\n    required string mobile          = 1;    // 手机\r\n    required string identifying     = 2;    // 验证码\r\n    optional uint32 client_type     = 3;    // 客户端类型\r\n    optional string spread_url      = 4;    // 渠道标识\r\n    optional string device_id       = 5;    // 设备ID\r\n    optional string platform        = 6;    // 请求来自的平台(如:pk)\r\n}\r\n\r\n// RQ token登录 hall_login_token/login\r\nmessage WebHallTokenLoginRQ {\r\n    required string token           = 1;    // token\r\n    required string login_type      = 2;    // 登录类型    \r\n    optional uint32 client_type     = 3;    // 客户端类型\r\n}\r\nmessage WebHallAccountLoginRQ {\r\n    required string account         = 1;    // 账号\r\n    required string password        = 2;    // 密码    \r\n    optional uint32 client_type     = 3;    // 客户端类型\r\n}\r\nmessage WebHallLoginRS{\r\n    required uint32 result              = 1;   // 结果\r\n                                               // 1011 - 封号\r\n                                               // 2202 - 验证码格式不对\r\n                                               // 2203 - 验证码不对\r\n                                               // 2204 - 手机号格式不对\r\n    required uint32 player_id           = 2;   // 用户id\r\n    required string token               = 3;   // token\r\n    required uint32 login_type          = 4;   // 1: 手机号登录 2: 微信登录 3: 渠道登陆 4. 账号登陆 5. token登陆\r\n    required bool   is_register         = 5;   // 1: 新注册     0: 非新注册\r\n    required string player_nick_name    = 6;   // 用户名\r\n    required uint32 server_version      = 7;   // 服务端版本\r\n    required string head_image          = 8;   // 头像url\r\n    required uint64 gold_num            = 9;   // 金币数\r\n    required uint32 diamond_num         = 10;  // 钻石数\r\n    required uint32 wisecard_num        = 11;  // 智卡数量\r\n    optional uint32 is_whitelist        = 12;  // 0: 普通用户 1: 6.7折白名单用户\r\n    optional bool   is_sign_login_award = 13;  // 是否已经签到\r\n}\r\nmessage WebHallLoginRS_PK{\r\n    required string result              = 1;   // 结果\r\n    required string player_id           = 2;   // 用户id\r\n    required string token               = 3;   // token\r\n    required string login_type          = 4;   // 1: 手机号登录 2: 微信登录 3: 渠道登陆 4. 账号登陆 5. token登陆\r\n    required bool   is_register         = 5;   // 1: 新注册     0: 非新注册\r\n    required string player_nick_name    = 6;   // 用户名\r\n    required string server_version      = 7;   // 服务端版本\r\n    required string head_image          = 8;   // 头像url\r\n    required string gold_num            = 9;   // 金币数\r\n    required string diamond_num         = 10;  // 钻石数\r\n    required string wisecard_num        = 11;  // 智卡数量\r\n    optional string is_whitelist        = 12;  // 0: 普通用户 1: 6.7折白名单用户\r\n    optional bool   is_sign_login_award = 13;  // 是否已经签到\r\n}\r\n// 手机获取验证码\r\nmessage CLWEBVerificationCodeRQ{\r\n\trequired string mobile = 1;\r\n}\r\n// 返回手机验证码\r\nmessage CLWEBVerificationCodeRS{\r\n\trequired uint32 result = 1;         // 0: 成功\r\n}\r\n\r\n`;\r\n\r\n// 按照官方的教程一步步做解析操作，\r\n// 外面很多高手都写了教程，但推荐还是去官网上看\r\n// https://github.com/dcodeIO/protobuf.js/wiki/Getting-started\r\n\r\nvar builder = Protobufjs.loadProto(protoDefine);\r\nvar ccc = builder.build(\"ccc\");\r\n// 以下我定义2个导出方法\r\n/**\r\n* 将js对象转成protobuf的二进制数据\r\n* msgName 对应proto里面的消息名称\r\n* obj是msgName对应的js对象\r\n**/\r\nmodule.exports.encodeObject = function ( msgName, obj )\r\n{\r\n    try {\r\n        var msgObj = new ccc[msgName](obj);\r\n        var buffer = msgObj.encode().toBuffer();\r\n        return buffer;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return new ArrayBuffer();\r\n    }\r\n}\r\n/**\r\n* 将protobuf的二进制数据 转成js对象\r\n* msgName 对应proto里面的消息名称\r\n* buffer\r\n**/\r\nmodule.exports.decodeBuffer = function ( msgName, buffer )\r\n{\r\n    try {\r\n        var message = ccc[msgName].decode(buffer)\r\n        return message;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return {};\r\n    }\r\n}\r\n"]}